import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class QueueProgram {

    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nQueue Operations:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Get Front");
            System.out.println("4. Get Rear");
            System.out.println("5. Print Queue");
            System.out.println("6. Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    enqueue(queue, scanner);
                    break;
                case 2:
                    dequeue(queue);
                    break;
                case 3:
                    getFront(queue);
                    break;
                case 4:
                    getRear(queue);
                    break;
                case 5:
                    printQueue(queue);
                    break;
                case 6:
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    public static void enqueue(Queue<Integer> queue, Scanner scanner) {
        System.out.print("Enter the item to enqueue: ");
        int item = scanner.nextInt();
        queue.offer(item);
        System.out.println("Enqueued: " + item);
    }

    public static void dequeue(Queue<Integer> queue) {
        if (!queue.isEmpty()) {
            int item = queue.poll();
            System.out.println("Dequeued: " + item);
        } else {
            System.out.println("Queue is empty. Cannot dequeue.");
        }
    }

    public static void getFront(Queue<Integer> queue) {
        if (!queue.isEmpty()) {
            int front = queue.peek();
            System.out.println("Front element: " + front);
        } else {
            System.out.println("Queue is empty.");
        }
    }

    public static void getRear(Queue<Integer> queue) {
        if (!queue.isEmpty()) {
            int rear = ((LinkedList<Integer>) queue).getLast();
            System.out.println("Rear element: " + rear);
        } else {
            System.out.println("Queue is empty.");
        }
    }

    public static void printQueue(Queue<Integer> queue) {
        if (!queue.isEmpty()) {
            System.out.print("Queue: ");
            for (int item : queue) {
                System.out.print(item + " ");
            }
            System.out.println();
        } else {
            System.out.println("Queue is empty.");
        }
    }
}
