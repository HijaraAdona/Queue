import java.util.Scanner;

public class QueueMenuProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int capacity;
        System.out.print("Enter the capacity of the queue: ");
        capacity = scanner.nextInt();

        Queue queue = new Queue(capacity);

        while (true) {
            System.out.println("\nQueue Operations:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Get Front");
            System.out.println("4. Get Rear");
            System.out.println("5. Print Queue");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter the item to enqueue: ");
                    int item = scanner.nextInt();
                    queue.enqueue(item);
                    break;
                case 2:
                    queue.dequeue();
                    break;
                case 3:
                    queue.getFront();
                    break;
                case 4:
                    queue.getRear();
                    break;
                case 5:
                    queue.printQueue();
                    break;
                case 6:
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

class Queue {
    private int capacity;
    private int[] queue;
    private int front, rear;

    public Queue(int capacity) {
        this.capacity = capacity;
        this.queue = new int[capacity];
        this.front = this.rear = -1;
    }

    public boolean isEmpty() {
        return front == -1;
    }

    public boolean isFull() {
        return (rear + 1) % capacity == front;
    }

    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue.");
        } else {
            if (isEmpty()) {
                front = rear = 0;
            } else {
                rear = (rear + 1) % capacity;
            }
            queue[rear] = item;
            System.out.println("Enqueued: " + item);
        }
    }

    public void dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
        } else {
            int item = queue[front];
            if (front == rear) {
                front = rear = -1;
            } else {
                front = (front + 1) % capacity;
            }
            System.out.println("Dequeued: " + item);
        }
    }

    public void getFront() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            System.out.println("Front element: " + queue[front]);
        }
    }

    public void getRear() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            System.out.println("Rear element: " + queue[rear]);
        }
    }

    public void printQueue() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            int current = front;
            System.out.print("Queue: ");
            while (current != rear) {
                System.out.print(queue[current] + " -> ");
                current = (current + 1) % capacity;
            }
            System.out.println(queue[rear]);
        }
    }
}
